def remote = [:]
pipeline {
    agent any
    
    parameters {
        gitParameter(
            type: 'PT_BRANCH',
            name: 'BRANCH',
            branchFilter: 'origin/(.*)',
            sortMode: 'DESCENDING_SMART'
        )
        booleanParam(
            name: 'ROLLBACK',
            defaultValue: false,
            description: 'Откатить на предыдущий image'
        )
        booleanParam(
            name: 'SKIP_BUILD',
            defaultValue: false,
            description: 'Пропустить сборку и вводить тег руками'
        )
        string(
            name: 'CUSTOM_TAG',
            defaultValue: '',
            description: 'Тег образа (если SKIP_BUILD=true)'
        )
    }
    
    environment {
        REPO = 'anestesia01/blog-go'
        DOCKER_TOKEN = credentials('docker_token')
        PRJ_NAME = 'items'
        GIT_URL = 'git@github.com:AnastasiyaGapochkina01/example-of-diploma.git'
        PRJ_DIR = '/var/www/items'
        HOST = "84.201.155.163"
    }
    
    stages {
        stage('Configure credentials') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-key', keyFileVariable: 'private_key', usernameVariable: 'username')]) {
                    script {
                        remote.name = "${env.HOST}"
                        remote.host = "${env.HOST}"
                        remote.user = "jenkins"
                        remote.identity = readFile "$private_key"
                        remote.allowAnyHosts = true
                        remote.agentForwarding = true
                    }
                }
            }
        }

        stage('Checkout repo') {
            steps {
                sshCommand remote: remote, command: """
                    set -ex ; set -o pipefail
                    test -d ${env.PRJ_DIR} || git clone ${env.GIT_URL} ${env.PRJ_DIR}
                    cd ${env.PRJ_DIR}
                    git fetch origin
                    git checkout ${params.BRANCH}
                """
            }
        }

        stage('Build Image') {
            when { expression { return !params.SKIP_BUILD && !params.ROLLBACK } }
            steps {
                sh """
                    docker buildx build --platform=linux/amd64 -t "${REPO}:${PRJ_NAME}-${BUILD_NUMBER}" .
                """
            }
        }

        stage('Push Image') {
            when { expression { return !params.SKIP_BUILD && !params.ROLLBACK } }
            steps {
                sh """
                    docker login -u anestesia01 -p "${env.DOCKER_TOKEN}"
                    docker push "${REPO}:${PRJ_NAME}-${BUILD_NUMBER}"
                """
            }
        }

        stage('Prepare envs') {
    steps {
        script {
            def deployTag = ""
            if (params.ROLLBACK) {
                deployTag = sshCommand remote: remote, command: """
                    cat ${PRJ_DIR}/prev_tag
                """
                echo "Rollback: используем тег ${deployTag}"
            } else if (params.SKIP_BUILD) {
                if (!params.CUSTOM_TAG?.trim()) {
                    error("Нужно ввести CUSTOM_TAG при SKIP_BUILD=true")
                }
                deployTag = "${REPO}:${params.CUSTOM_TAG}"
            } else {
                deployTag = "${REPO}:${PRJ_NAME}-${BUILD_NUMBER}"
            }
            env.DEPLOY_TAG = deployTag

            sshCommand remote: remote, command: """
                set -ex ; set -o pipefail
                cd ${PRJ_DIR}
                test -f .env || python3 set_env.py "${REPO}:${PRJ_NAME}-${BUILD_NUMBER}"
                # Переписываем IMAGE_TAG новым значением
                sed -i '/^APP_IMAGE=/d' .env
                echo "APP_IMAGE=${DEPLOY_TAG}" >> .env
            """
        }
    }
}


        stage('Deploy') {
            steps {
                sshCommand remote: remote, command: """
                    set -ex ; set -o pipefail
                    cd $PRJ_DIR
                    docker compose up -d
                    docker ps --filter name=backend --format '{{.Image}}' | awk -F ':' '{print $2}' > prev_tag
                """
            }
        }
    }
}
