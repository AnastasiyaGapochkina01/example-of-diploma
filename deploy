def remote = [:]
pipeline {
    agent {
        label 'main'
    }
    
    parameters {
        gitParameter(
            type: 'PT_BRANCH',
            name: 'BRANCH',
            branchFilter: 'origin/(.*)',
            sortMode: 'DESCENDING_SMART'
        )
        booleanParam(
            name: 'ROLLBACK',
            defaultValue: false,
            description: 'Откатить на CUSTOM_TAG'
        )
        booleanParam(
            name: 'RUN_TESTS',
            defaultValue: true,
            description: 'Запустить тесты'
        )
        string(
            name: 'CUSTOM_TAG',
            defaultValue: '',
            description: 'Тег образа (если ROLLBACK=true)'
        )
    }
    
    environment {
        REPO = 'anestesia01/blog-go'
        DOCKER_TOKEN = credentials('docker_token')
        PRJ_NAME = 'items'
        GIT_URL = 'git@github.com:AnastasiyaGapochkina01/example-of-diploma.git'
        PRJ_DIR = '/var/www/items'
        HOST = "89.169.161.240"
    }
    
    stages {
        stage('Configure credentials') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-key', keyFileVariable: 'private_key', usernameVariable: 'username')]) {
                    script {
                        remote.name = "${env.HOST}"
                        remote.host = "${env.HOST}"
                        remote.user = "jenkins"
                        remote.identity = readFile "$private_key"
                        remote.allowAnyHosts = true
                        remote.agentForwarding = true
                    }
                }
            }
        }

        stage('Checkout repo') {
            steps {
                sshCommand remote: remote, command: """
                    set -ex ; set -o pipefail
                    test -d ${env.PRJ_DIR} || git clone ${env.GIT_URL} ${env.PRJ_DIR}
                    cd ${env.PRJ_DIR}
                    git fetch origin
                    git checkout ${params.BRANCH}
                """
            }
        }

        stage('Prune old images') {
            steps {
                sh "docker image prune -a"
            }
        }

        stage('Build Image') {
           when {
                expression { !params.ROLLBACK }
            }
            steps {
                sh """
                    docker buildx build --platform=linux/amd64 -t "${REPO}:${PRJ_NAME}-${BUILD_NUMBER}" .
                """
            }
        }
        stage('Run tests'){
            when {
                expression { !params.ROLLBACK }
            }
            agent {
                docker { 
                    image "${REPO}:${PRJ_NAME}-${BUILD_NUMBER}"
                    label 'docker'
                    //reuseNode true
                }
            }
            steps {
                sh "pytest -v --disable-warnings --maxfail=1 --junitxml=results.xml"
                archiveArtifacts artifacts: "results.xml", allowEmptyArchive: false
            }
        }

        stage('Push Image') {
            when {
                expression { !params.ROLLBACK }
            }
            steps {
                sh """
                    docker login -u anestesia01 -p "${env.DOCKER_TOKEN}"
                    docker push "${REPO}:${PRJ_NAME}-${BUILD_NUMBER}"
                """
            }
        }

        stage('Prepare envs'){
            when {
                expression { !params.ROLLBACK }
            }
            steps {
                script {
                    sshCommand remote: remote, command: """
                        set -ex ; set -o pipefail
                        cd ${PRJ_DIR}
                        test -f .env || touch .env
                        python3 set_env.py "${REPO}:${PRJ_NAME}-${BUILD_NUMBER}"
                    """
                }
            }
        }


        stage('Deploy') {
            when {
                expression { !params.ROLLBACK }
            }
            steps {
                sshCommand remote: remote, command: """
                    set -ex ; set -o pipefail
                    cd $PRJ_DIR
                    docker compose up -d
                """
            }
        }

        stage('Rollback'){
            when {
                expression { params.ROLLBACK == true }
            }
            steps {
                script {
                    sshCommand remote: remote, command: """
                        set -ex ; set -o pipefail
                        cd ${PRJ_DIR}
                        test -f .env || touch .env
                        sed -i '/^APP_IMAGE=/d' .env
                        echo "APP_IMAGE=${REPO}:${CUSTOM_TAG}" >> .env
                        docker compose up -d backend --force-recreate
                    """
                }
            }
        }
    }
}
