def remote = [:]

pipeline {
    agent any
    
    parameters {
        gitParameter (type: 'PT_BRANCH', name: 'BRANCH', branchFilter: 'origin/(.*)', sortMode: 'DESCENDING_SMART')
    }
    
    environment {
      REPO = 'anestesia01/blog-go'
      DOCKER_TOKEN = credentials('docker_token')
      PRJ_NAME = 'items'
      GIT_URL = 'git@github.com:AnastasiyaGapochkina01/example-of-diploma.git'
      PRJ_DIR = '/var/www/items'
      HOST = "84.201.155.163"
    }
    
    stages {
        stage('Configure credentials') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-key', keyFileVariable: 'private_key', usernameVariable: 'username')]) {
                    script {
                        remote.name = "${env.HOST}"
                        remote.host = "${env.HOST}"
                        remote.user = "jenkins"
                        remote.identity = readFile "$private_key"
                        remote.allowAnyHosts = true
                        remote.agentForwarding = true
                    }
                }
            }
        }

        stage('Checkout repo') {
            steps {
                sshCommand remote: remote, command: """
                    set -ex ; set -o pipefail
                    test -d ${env.PRJ_DIR} || git clone ${env.GIT_URL} ${env.PRJ_DIR}
                    cd ${env.PRJ_DIR}
                    git fetch origin
                    git checkout ${params.BRANCH}
                """
            }
        }
      
        stage('Build Image') {
            steps {
                script {
                    sh """
                        docker build -t "${REPO}:${PRJ_NAME}-${BUILD_NUMBER}" .
                    """
                }
            }
        }
      
        stage('Push Image') {
            steps {
                script {
                    sh """
                        docker login -u anestesia01 -p "${env.DOCKER_TOKEN}"
                        docker push "${REPO}:${PRJ_NAME}-${BUILD_NUMBER}"
                    """
                }
            }
        }

        stage('Prepare envs'){
            steps {
                script {
                    sshCommand remote: remote, command: """
                        set -ex ; set -o pipefail
                        cd ${PRJ_DIR}
                        test -f .env || touch .env
                        python3 set_env.py "${REPO}:${PRJ_NAME}-${BUILD_NUMBER}"
                    """
                }
            }
        }

        stage('Deploy'){
            steps {
                sshCommand remote: remote, command: """
                    set -ex ; set -o pipefail
                    cd $PRJ_DIR
                    docker compose up -d
                """
            }
        }
    }
}
